name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      run: |
       ls -lr  
       ls docker-registry-setup
       docker build docker-registry-setup/dockerfile -t pic1:secure 
       docker tag pic1:secure ${{ secrets.DOCKER_USERNAME }}/pic1:secure
       docker push ${{ secrets.DOCKER_USERNAME }}/pic1:secure
      

    - name: Start SonarQube
      run: |
        docker network create sonarnet 
        docker run -d --name sonar-postgres --network sonarnet -p 5432:5432 -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar -e POSTGRES_DB=sonar postgres:latest
        docker run -d --name sonarqube --network sonarnet -p 9000:9000 -e SONAR_JDBC_URL=jdbc:postgresql://sonar-postgres/sonar -e SONAR_JDBC_USERNAME=sonar -e SONAR_JDBC_PASSWORD=sonar sonarqube:latest
        sleep 60  # Wait for SonarQube to start

    - name: DAST Scan with OWASP ZAP
      run: |
        docker run -t owasp/zap2docker-stable zap-full-scan.py -t http://localhost -r report.html

    - name: SCA Scan with SonarQube
      run: |
         docker run --rm -e SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}" -e SONAR_LOGIN="${{ secrets.SONAR_TOKEN }}" -v "$(pwd):/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=mca -Dsonar.sources=. -Dsonar.language=python -Dsonar.docker.image=pic1:secure

    - name: Stop SonarQube and PostgreSQL
      if: always()
      run: |
        docker stop sonarqube sonar-postgres
        docker network rm sonarnet
